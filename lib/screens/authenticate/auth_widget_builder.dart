import 'package:fitbit_for_friends/services/firebase/authService.dart';
import 'package:fitbit_for_friends/services/firebase/firestore.dart';
import 'package:fitbit_for_friends/services/fitbit/fit_token_resp.dart';
import 'package:fitbit_for_friends/services/fitbit/fitbitService.dart';
import 'package:fitbit_for_friends/services/fitbit/oauth_fitbit.dart';
import 'package:fitbit_for_friends/services/fitbit/oauth_helper_fitbit.dart';
import 'package:flutter/material.dart';
import 'package:oauth2_client/access_token_response.dart';
import 'package:oauth2_client/oauth2_helper.dart';
import 'package:provider/provider.dart';

/// Used to create user-dependant objects that need to be accessible by all widgets.
/// This widget should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatefulWidget {
  AuthWidgetBuilder({Key key, @required this.builder}) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<LoggedUser>) builder;

  @override
  _AuthWidgetBuilderState createState() => _AuthWidgetBuilderState();
}

class _AuthWidgetBuilderState extends State<AuthWidgetBuilder> {
  LoggedUser user;
  OauthFitbitHelper _oauthHelper;
  FirestoreService fireServ;
  bool runOnce = true;

  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    print('AuthWidgetBuilder rebuild');
    final authService = Provider.of<AuthService>(context, listen: false);
    return StreamBuilder<LoggedUser>(
      stream: authService.onAuthStateChanged,
      builder: (context, snapshot) {
        print('StreamBuilder: ${snapshot.connectionState}');
        user = snapshot.data;
        if (user != null && runOnce) {
          oauthServiceInit(user);
          runOnce = false;
        }
        if (_oauthHelper != null) {
          return MultiProvider(
            providers: [
              Provider<LoggedUser>.value(value: user),
              Provider<FitbitService>.value(value: FitbitService(fitBitHelper: _oauthHelper)),
              Provider<FirestoreService>(
                create: (_) => fireServ,
              ),
            ],
            child: widget.builder(context, snapshot),
          );
        }
        return widget.builder(context, snapshot);
      },
    );
  }

  oauthServiceInit(LoggedUser user) {
    OAuthFitbit oauth = OAuthFitbit(customUriScheme: "fitbitforfriends", redirectUri: "fitbitforfriends://redirecturi");
    OauthFitbitHelper oauthHelper = OauthFitbitHelper(oauth);
    Future<FitAccessTokenResponse> future = oauthHelper.getToken();
    future.then((value) {
      setState(() {
        _oauthHelper = oauthHelper;
        fireServ = FirestoreService(loggedUid: user.uid);
        if (value.userId != null) {
          fireServ.addUser(user, value.userId);
        }
      });
    });

  }
}
